{
    "componentChunkName": "component---src-templates-article-js",
    "path": "/articles/pyconfr-2017/",
    "result": {"data":{"markdownRemark":{"html":"<p>Les 23 et 24 septembre derniers, j’étais à Toulouse pour l’<a href=\"https://www.pycon.fr/2017/\">édition 2017 de PyCon FR</a>. Le programme était riche, avec trois « <em>tracks</em> » en parallèle, sans compter les « <em>sprints</em> » et les ateliers. Je partage ici quelques notes sur les présentations auxquelles j’ai pu assister.</p>\n<h2>Tests</h2>\n<p>Le samedi après-midi, plusieurs présentations se sont succédées autour de la thématique des tests, dans une sorte de mini « <em>track</em> ».</p>\n<p>Vincent Maillol nous a d’abord présenté une approche intéressante qu’ils utilisent pour les tests fonctionnels de leur API / application web. L’outil (<a href=\"https://pypi.python.org/pypi/cricri/\">cricri</a>) permet d’exprimer des scénarios de test en déclarant les différentes parties et les contraintes associées (la partie A est optionnelle, mais doit s’exécuter avant la partie B). Il va générer automatiquement les tests correspondant aux différentes combinaisons.</p>\n<p>L’outil s’intègre au <em>test runner</em> standard de Python, mais malheureusement pas à Pytest.</p>\n<p>J’y ai retrouvé des analogies mais aussi des différences avec l’approche BDD (voir par exemple <a href=\"https://fr.wikipedia.org/wiki/Behavior-driven_development\">pytest-bdd</a> pour une implémentation en Python) :</p>\n<ul>\n<li>dans les deux cas on va pouvoir découper ses scénarios en « <em>steps</em> » réutilisables</li>\n<li>dans l’approche BDD, on va plutôt lister explicitement tous les scénarios, ce qui a une valeur en terme de documentation et de communication avec l’équipe produit, mais qui peut introduire une certaine redondance ; l’approche générative est plus concise, mais ça peut devenir plus difficile de savoir quels scénarios sont effectivement pris en compte</li>\n<li>dans l’approche BDD, on va plutôt écrire les scénarios dans un DSL comme Gherkin, toujours dans le but d’être lisible par des non-développeurs, mais ça rajoute un niveau d’indirection et donc de lourdeur dans l’écriture des tests (personnellement je préfère écrire un test fonctionnel directement en Python qu’en Gherkin)</li>\n</ul>\n<p>Une piste de réflexion : utiliser <a href=\"http://hypothesis.readthedocs.io\">Hypothesis</a> pour générer automatiquement des séquences d’opérations sur une application ou une API, chacune étant ensuite définie par un « step », de manière à valider des invariants (par exemple : en aucun cas deux utilisateurs ne peuvent réserver un même logement à la même date).</p>\n<p>J’ai apprécié ensuite la <a href=\"https://octobus.net/presentations/perf_test.html\">présentation de Boris Feld et Pierre-Yves David</a> sur les tests de performance. Ils ont bien présenté l’intérêt de considérer la performance comme une fonctionnalité du logiciel, et de suivre son évolution avec le temps via une suite de tests de performances automatisés.</p>\n<p>Ils ont exposé toute une série de facteurs à prendre en compte pour limiter la variabilité des résultats, au niveau du matériel, du noyau et des outils. Difficile d’avoir un environnement contrôlé dans le cloud, donc pour leurs besoins ils ont mis en place une machine physique dédiée.</p>\n<p>Deux outils à retenir :</p>\n<ul>\n<li><a href=\"https://perf.readthedocs.io/\">perf</a> : prépare le système, exécute les benchmarks, enregistre les données…</li>\n<li><a href=\"https://asv.readthedocs.io/\">asv</a> (<em>Air Speed Velocity</em>) : un peu le <em>Jenkins</em> des tests de performance. Il sait lancer automatiquement la suite de tests de performance à chaque commit, stocker les résultats, les afficher sous forme de jolis graphe, et détecter les variations significatives.</li>\n</ul>\n<p>Enfin, j'avais moi-même une présentation de quelques techniques de test avancées en Python (<a href=\"https://speakerdeck.com/ronnix/techniques-de-test-avancees-en-python\">les diapos</a> et <a href=\"https://github.com/ronnix/pyconfr2017\">les exemples</a>).  Merci à tous ceux qui m'ont fait des retours, j'ai apprécié vos compliments comme vos suggestions d'amélioration. J'ai noté notamment de regarder <a href=\"https://pypi.python.org/pypi/libfaketime\">libfaketime</a>, une alternative à <a href=\"https://pypi.python.org/pypi/freezegun\">freezegun</a> avec de meilleures performances, et d'aborder les manières d'intégrer <a href=\"https://tox.readthedocs.io\">tox</a> et <a href=\"https://travis-ci.org\">Travis CI</a>.</p>\n<h2>Devops</h2>\n<p>Côté devops, la <a href=\"https://gawel.github.io/nuka_pycon_fr/\">présentation de Gaël Pasgrimaud</a> montrait que malgré l’abondance d’outils d’orchestration et de gestion de configuration, certains cas d’utilisation restent mal couverts. Leur besoin : exécuter des tâches impératives sur un grand nombre de machines hébergées (plusieurs dizaines ou centaines) sur lesquelles ils ne peuvent pas forcément installer d’agent (connexion exclusivement par SSH). Ils utilisent habituellement <a href=\"https://www.ansible.com\">Ansible</a>, mais les administrateurs sytème n’étaient pas satisfaits de ses performances dans ce scénario.</p>\n<p>Dans un contexte où l’on peut installer un agent, je pense que <a href=\"https://saltstack.com\">Salt</a> serait une bonne solution (utilisé par exemple chez <a href=\"https://www.slideshare.net/mobile/ThomasJackson4/salt-stack-at-web-scale-better-stronger-faster\">LinkedIn pour gérer plusieurs dizaines de milliers de serveurs</a>). Et avec un plus petit nombre de machines, quelque chose de plus simple comme <a href=\"http://www.fabfile.org\">Fabric</a> (+ <a href=\"https://pypi.python.org/pypi/fabtools\">fabtools</a> !) fonctionne de manière satisfaisante. Mais pour commander efficacement 300 machines par SSH, aucune solution existante ne semblait convenir.</p>\n<p>Ils ont donc développé un outil maison (<a href=\"https://github.com/bearstech/nuka\">nuka</a>) basé sur Python 3, utilisant <a href=\"https://docs.python.org/3/library/asyncio.html\">asyncio</a> pour gérer les multiples connexions SSH concurrentes.</p>\n<p>La discussion sur les goulets d’étranglement (<em>bottlenecks</em>) rencontrés a été intéressante : la principale limite aux performances (au delà de la qualité du réseau) était la connexion locale à l’agent SSH pour l’authentification par clé.</p>\n<p>Un peu plus tard, la <a href=\"https://philpep.org/dl/testinfra_pyconfr_2017.pdf\">présentation de Philippe Pépiot</a> a porté sur <a href=\"https://pypi.python.org/pypi/testinfra\">testinfra</a>, une bibliothèque qui permet d'écrire des tests qui décrivent l'état souhaité d'un serveur, indépendamment de l'outil de gestion de configuration utilisé (Chef, Puppet, Salt, Ansible…). Je suis fan de cette approche, et ça me semble une super alternative à <a href=\"http://serverspec.org\">serverspec</a> (là aussi, je préfère écrire mes tests avec Python et pytest qu'avec un DSL Ruby).</p>\n<h2>Scaling et parallélisme</h2>\n<p>La <a href=\"https://julien.danjou.info/talks/scalable-and-distributed-applications-in-python-pyconfr-2017.pdf\">présentation de Julien Danjou</a> était un excellent état de l’art sur les approches et les outils pour le parallélisme et les systèmes distribués en Python : multi-thread, multi-process, queues…</p>\n<p>J'ai noté plusieurs bibliothèques et outils intéressants à regarder :</p>\n<ul>\n<li><a href=\"https://pypi.python.org/pypi/cachetools\">cachetools</a> : lorsque le <a href=\"https://docs.python.org/3/library/functools.html#functools.lru_cache\">functools.lru_cache</a> de la bibliothèque standard ne suffit pas</li>\n<li><a href=\"https://pypi.python.org/pypi/cotyledon\">cotyledon</a> : pour gérer des processus à longue durée de vie (services / démons)</li>\n<li><a href=\"https://pypi.python.org/pypi/futurist\">futurist</a> : extensions à l'excellent module <a href=\"https://docs.python.org/3/library/concurrent.futures.html\">concurrent.futures</a> de la bibliothèque standard</li>\n<li><a href=\"https://pypi.python.org/pypi/tenacity\">tenacity</a> : un décorateur <code class=\"language-text\">@retry</code> très paramétrable pour réessayer automatiquement les accès à des services qui peuvent être indisponibles</li>\n<li><a href=\"https://pypi.python.org/pypi/fasteners\">fasteners</a> : une bibliothèque qui forunit plusieurs implémentations de verrous (<em>locks</em>)</li>\n</ul>\n<h2>Unicode et alphabets</h2>\n<p>Boris Feld a refait sa <a href=\"https://lothiraldan-pyconfr-2017-unicode.netlify.com/\">très bonne présentation</a> qui démystifie les chaînes de caractères, les octets, l’unicode et toutes leurs feintes en Python 2 et 3.</p>\n<p>Ensuite Guillaume Ayoub à enchaîné avec une présentation riche, agréable, analogique et participative, qui nous a emmené des origines de l’écriture aux Emoji en passant par l’explication des différences entre crénage (<em>kerning</em>), anti-crénelage (<em>anti-aliasing</em>) et <em>hinting</em> en typographie numérique.</p>\n<h2>Et le reste</h2>\n<p>Impossible de voir toutes les présentations intéressantes dans une telle conférence, donc j’ai notamment loupé :</p>\n<ul>\n<li>la présentation de Stéphane Angel et Joachim Jablon sur <a href=\"https://twidi.github.io/python-packaging-talk/fr\">les bonnes pratiques de packaging</a></li>\n<li>la présentation de Xavier Ordoquy sur <a href=\"https://speakerdeck.com/xordoquy/mauvaises-bonnes-idees-pour-rest\">les fausses bonnes idées dans les API REST</a></li>\n<li>la présentation de Frank Rousseau sur l’<a href=\"https://twitter.com/gelnior/status/911940961256820736\">utilisation de Python par les professionnels de l’animation 3D</a></li>\n<li>et plein d'autres qui étaient sûrement très bien aussi…</li>\n</ul>\n<p>Heureusement les conférences ont été filmées, donc une séance de rattrapage sera possible dès qu'elles seront en ligne !</p>\n<p><strong>Update</strong>: les vidéos sont en ligne sur <a href=\"http://pyvideo.org/events/pycon-fr-2017.html\">http://pyvideo.org/events/pycon-fr-2017.html</a></p>","frontmatter":{"title":"PyConFr 2017","date":"2017-10-03","tags":["Conferences","Python","PyConFr"]}}},"pageContext":{"slug":"/articles/pyconfr-2017/"}},
    "staticQueryHashes": ["396060594"]}